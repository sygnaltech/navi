{
  "version": 3,
  "sources": ["../src/tourAutocomplete.ts"],
  "sourcesContent": ["\n/*\n * Component | Tour Autocomplete\n */\n\nimport gsap from 'gsap'; \n \n  \nconst AUTOCOMPLETE_ELEM = \"wfu-autocomplete\"; \nconst AUTOCOMPLETE_LIST = \"wfu-autocomplete-list\"; \nconst AUTOCOMPLETE_MATCH = \"wfu-autocomplete-match\"; \nconst AUTOCOMPLETE_SEARCH = \"wfu-autocomplete-search\";\n\nexport class TourAutocomplete {\n\n//  modelDropdown: WebflowDropdown; \n\n  constructor() {\n  }\n\n  init() {\n\n    this.setupListeners(); \n//    this.displayMatchingElements(\"\"); \n    \n  }\n\n  private setupListeners(): void {\n    // Find the input element with the custom attribute\n    const inputElement = document.querySelector(`[${AUTOCOMPLETE_ELEM}]`) as HTMLInputElement;\n    if (inputElement) {\n      // Add event listener for input changes\n      inputElement.addEventListener('input', () => {\n        this.displayMatchingElements(inputElement.value);\n      });\n    } else {\n      console.error(\"no input element found for tour search.\"); \n//      return;\n      // error\n    }\n\n    // Find the input element with the custom attribute\n    const searchElement = document.querySelector(`[${AUTOCOMPLETE_SEARCH}]`) as HTMLLinkElement;\n    if (searchElement) {\n      // Add event listener for input changes\n      searchElement.addEventListener('click', () => {\n        this.siteSearch(inputElement.value);\n      });\n    }\n\n  }\n\n  siteSearch(matchingString: string): void {\n    const query = encodeURIComponent(matchingString);\n    const url = `/search?query=${query}`;\n    window.location.href = url;\n  }\n  \n  displayMatchingElements(matchingString: string) {\n\n// console.log(\"updating\", matchingString); \n\n// TODO: ensure it's visible\n\n    // Get the list element with the custom attribute\n    const listElement = document.querySelector(`[${AUTOCOMPLETE_LIST}]`) as HTMLElement;\n    \n    // Show or hide the list element based on the input content\n    // if (matchingString.trim() === \"\") {\n    //   listElement.style.display = 'none';\n    //   return; // No need to continue if the input is empty\n    // } else {\n    //   listElement.style.display = 'block';\n    // }\n\n    // Convert the matching string to lowercase for case-insensitive comparison\n    const lowerCaseMatchingString = matchingString.toLowerCase();\n  \n    // Get all elements with the custom attribute and hide them initially\n    const elements1: NodeListOf<Element> = document.querySelectorAll(`[${AUTOCOMPLETE_LIST}] [${AUTOCOMPLETE_MATCH}]`);\n    elements1.forEach(element => {\n      (element as HTMLElement).style.display = 'none';\n    });\n  \n    // Get all elements with the custom attribute\n    const elements = document.querySelectorAll(`[${AUTOCOMPLETE_LIST}] [${AUTOCOMPLETE_MATCH}]`);\n  \n    // Loop through all elements and check if the attribute value contains the matching string (case-insensitive)\n    elements.forEach(element => {\n      const attributeValue = element.getAttribute(AUTOCOMPLETE_MATCH)?.toLowerCase();\n      console.log(lowerCaseMatchingString, attributeValue);\n      if (attributeValue && attributeValue.includes(lowerCaseMatchingString)) {\n        // If it matches, set display to block\n        (element as HTMLElement).style.display = 'block';\n      }\n    });\n  }\n\n}\n"],
  "mappings": ";;AAQA,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,qBAAqB;AAC3B,MAAM,sBAAsB;AAErB,MAAM,mBAAN,MAAuB;AAAA,IAI5B,cAAc;AAAA,IACd;AAAA,IAEA,OAAO;AAEL,WAAK,eAAe;AAAA,IAGtB;AAAA,IAEQ,iBAAuB;AAE7B,YAAM,eAAe,SAAS,cAAc,IAAI,oBAAoB;AACpE,UAAI,cAAc;AAEhB,qBAAa,iBAAiB,SAAS,MAAM;AAC3C,eAAK,wBAAwB,aAAa,KAAK;AAAA,QACjD,CAAC;AAAA,MACH,OAAO;AACL,gBAAQ,MAAM,yCAAyC;AAAA,MAGzD;AAGA,YAAM,gBAAgB,SAAS,cAAc,IAAI,sBAAsB;AACvE,UAAI,eAAe;AAEjB,sBAAc,iBAAiB,SAAS,MAAM;AAC5C,eAAK,WAAW,aAAa,KAAK;AAAA,QACpC,CAAC;AAAA,MACH;AAAA,IAEF;AAAA,IAEA,WAAW,gBAA8B;AACvC,YAAM,QAAQ,mBAAmB,cAAc;AAC/C,YAAM,MAAM,iBAAiB;AAC7B,aAAO,SAAS,OAAO;AAAA,IACzB;AAAA,IAEA,wBAAwB,gBAAwB;AAO9C,YAAM,cAAc,SAAS,cAAc,IAAI,oBAAoB;AAWnE,YAAM,0BAA0B,eAAe,YAAY;AAG3D,YAAM,YAAiC,SAAS,iBAAiB,IAAI,uBAAuB,qBAAqB;AACjH,gBAAU,QAAQ,aAAW;AAC3B,QAAC,QAAwB,MAAM,UAAU;AAAA,MAC3C,CAAC;AAGD,YAAM,WAAW,SAAS,iBAAiB,IAAI,uBAAuB,qBAAqB;AAG3F,eAAS,QAAQ,aAAW;AAC1B,cAAM,iBAAiB,QAAQ,aAAa,kBAAkB,GAAG,YAAY;AAC7E,gBAAQ,IAAI,yBAAyB,cAAc;AACnD,YAAI,kBAAkB,eAAe,SAAS,uBAAuB,GAAG;AAEtE,UAAC,QAAwB,MAAM,UAAU;AAAA,QAC3C;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EAEF;",
  "names": []
}
