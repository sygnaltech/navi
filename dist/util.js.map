{
  "version": 3,
  "sources": ["../src/util.ts"],
  "sourcesContent": ["\nexport function findAncestorWithAttribute(element: HTMLElement, attributeName: string): HTMLElement | null {\n    let currentElement: HTMLElement | null = element;\n\n    while (currentElement) {\n        if (currentElement.hasAttribute(attributeName)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n\n    return null;\n}\n\nexport function getAncestorAttributeValue(element: HTMLElement, attributeName: string): string | null {\n    let currentElement: HTMLElement | null = element;\n\n    while (currentElement) {\n        if (currentElement.hasAttribute(attributeName)) {\n            return currentElement.getAttribute(attributeName);\n        }\n        currentElement = currentElement.parentElement;\n    }\n\n    return null;\n}\n\nexport function hasAncestorWithAttribute(element: HTMLElement, attributeName: string): boolean {\n    return findAncestorWithAttribute(element, attributeName) !== null;\n}\n\nexport function convertToPixels(value: string, contextElement: HTMLElement = document.documentElement): number {\n    // Parse the numeric value and unit, including negative values\n    const match = value.match(/^(-?\\d+\\.?\\d*)(rem|em|px|vh|vw|%)$/);\n    if (!match) throw new Error('Invalid value format');\n\n    const [, amountStr, unit] = match;\n    const amount = parseFloat(amountStr);\n\n    // Convert based on the unit\n    switch (unit) {\n        case 'px':\n            return amount;\n        case 'rem':\n            return amount * parseFloat(getComputedStyle(document.documentElement).fontSize);\n        case 'em':\n            // For 'em', it's relative to the font-size of the context element.\n            return amount * parseFloat(getComputedStyle(contextElement).fontSize);\n        case 'vh':\n            return amount * window.innerHeight / 100;\n        case 'vw':\n            return amount * window.innerWidth / 100;\n        case '%':\n            // For %, it's relative to the parent element's size. This can be tricky as it depends on the property (width, height, font-size, etc.).\n            // In this example, we'll use it relative to the width of the context element, but you might need to adjust based on your specific use case.\n            return amount * contextElement.clientWidth / 100;\n        default:\n            throw new Error('Unsupported unit');\n    }\n}\n\n\n/*\n// Example usage:\nconst pixelValue = convertToPixels(\"10vh\");\nconsole.log(pixelValue);\n*/\n\n"],
  "mappings": ";;AACO,WAAS,0BAA0B,SAAsB,eAA2C;AACvG,QAAI,iBAAqC;AAEzC,WAAO,gBAAgB;AACnB,UAAI,eAAe,aAAa,aAAa,GAAG;AAC5C,eAAO;AAAA,MACX;AACA,uBAAiB,eAAe;AAAA,IACpC;AAEA,WAAO;AAAA,EACX;AAEO,WAAS,0BAA0B,SAAsB,eAAsC;AAClG,QAAI,iBAAqC;AAEzC,WAAO,gBAAgB;AACnB,UAAI,eAAe,aAAa,aAAa,GAAG;AAC5C,eAAO,eAAe,aAAa,aAAa;AAAA,MACpD;AACA,uBAAiB,eAAe;AAAA,IACpC;AAEA,WAAO;AAAA,EACX;AAEO,WAAS,yBAAyB,SAAsB,eAAgC;AAC3F,WAAO,0BAA0B,SAAS,aAAa,MAAM;AAAA,EACjE;AAEO,WAAS,gBAAgB,OAAe,iBAA8B,SAAS,iBAAyB;AAE3G,UAAM,QAAQ,MAAM,MAAM,oCAAoC;AAC9D,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,sBAAsB;AAElD,UAAM,CAAC,EAAE,WAAW,IAAI,IAAI;AAC5B,UAAM,SAAS,WAAW,SAAS;AAGnC,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO,SAAS,WAAW,iBAAiB,SAAS,eAAe,EAAE,QAAQ;AAAA,MAClF,KAAK;AAED,eAAO,SAAS,WAAW,iBAAiB,cAAc,EAAE,QAAQ;AAAA,MACxE,KAAK;AACD,eAAO,SAAS,OAAO,cAAc;AAAA,MACzC,KAAK;AACD,eAAO,SAAS,OAAO,aAAa;AAAA,MACxC,KAAK;AAGD,eAAO,SAAS,eAAe,cAAc;AAAA,MACjD;AACI,cAAM,IAAI,MAAM,kBAAkB;AAAA,IAC1C;AAAA,EACJ;",
  "names": []
}
