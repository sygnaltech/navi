{
  "version": 3,
  "sources": ["../src/page/home.ts", "../src/page/tour.ts", "../src/routeDispatcher.ts", "../src/index.ts"],
  "sourcesContent": ["\n/*\n * Page | Home\n */\n\nimport gsap from 'gsap'; \n \n\nexport class HomePage {\n\n//  modelDropdown: WebflowDropdown; \n\n  constructor() {\n  }\n  \n  init() {\n\n    console.log(\"Home.\"); \n\n\n\n    // const elements: NodeListOf<Element> = document.querySelectorAll(`.${item.className}`);\n    // console.log(\"Making elements visible\", elements);\n    // gsap.to(elements, { display: 'block' });\n\n\n  }\n\n  \n  \n\n\n\n}\n", "\n/*\n * Page | Tour\n * https://codepen.io/memetican/pen/WNWPoJq/dad2a4c9f1ed011aaefa61f6853a5659\n */\n\nimport gsap from 'gsap'; \n \n\nexport class TourPage {\n\n//  modelDropdown: WebflowDropdown; \n\n  constructor() {\n  }\n  \n  init() {\n\n    console.log(\"Tour.\"); \n\n    window.addEventListener('message', function(event: MessageEvent) { \n\n      // Check the origin to ensure the message is from a trusted source\n      console.log(\"event received\");\n      console.log(event.data); \n      \n      // if (event.origin !== \"https://example.com\") {\n      //   console.log('The message was not sent from a trusted source!');\n      //   return;\n      // }\n    \n      const { date, numberOfPeople } = event.data;\n      \n      // Check if the values exist and are of the expected types\n      if (typeof date === 'string' && typeof numberOfPeople === 'string') {\n        const dateElement = document.getElementById('tour-date') as HTMLInputElement | null;\n        const peopleElement = document.getElementById('adults') as HTMLInputElement | null;\n    \n        if (dateElement && peopleElement) {\n          dateElement.value = date;\n          peopleElement.value = numberOfPeople;\n        } else {\n          console.log('One or more form elements were not found!');\n        }\n      } else {\n        console.log('Received data is not in the expected format!');\n      }\n    }, false);\n    \n    // window.addEventListener('message', function(event) {\n    //   // Check the origin to ensure the message is from a trusted source\n    \n    //   console.log(\"event received1\");\n  \n    //   console.log(event.data); \n      \n    //   /*\n    //     if (event.origin !== \"https://example.com\") {\n    //         console.log('The message was not sent from a trusted source!');\n    //         return;\n    //     }\n    // */\n    //     var date = event.data.date;\n    //     var numberOfPeople = event.data.numberOfPeople;\n    \n    //     // Now you can use these values to set the form fields\n    //     document.getElementById('tour-date').value = date;\n    //     document.getElementById('adults').value = numberOfPeople;\n\n    // }, false);\n\n    // const elements: NodeListOf<Element> = document.querySelectorAll(`.${item.className}`);\n    // console.log(\"Making elements visible\", elements);\n    // gsap.to(elements, { display: 'block' });\n\n\n  }\n\n  \n  \n\n\n\n}\n", "/*\n * Sygnal\n * Route Dispatcher\n * \n */\n\ntype RouteHandler = () => void;\n\nexport interface Routes {\n    [path: string]: RouteHandler;\n}\n\n// Example routes\nconst routes: Routes = {\n    '/': () => {\n        console.log('This is the homepage.');\n    },\n    '/about': () => {\n        console.log('This is the about page.');\n    },\n    '/contact/*': () => {\n        console.log('This is the contact page.');\n    },\n};\n\nexport class RouteDispatcher {\n\n    routes: Routes;\n\n    constructor() {\n//        this.routes = {};\n    }\n\n    matchRoute(path: string): RouteHandler | null {\n        for (const route in this.routes) {\n            if (route.endsWith('*')) {\n                // If the route ends with *, treat it as a wildcard\n                const baseRoute = route.slice(0, -1); // Remove the * from the end\n                if (path.startsWith(baseRoute)) {\n                    return this.routes[route];\n                }\n            } else if (route === path) {\n                // Exact match\n                return this.routes[route];\n            }\n        }\n        return null; // No matching route found\n    }\n    \n    dispatchRoute() {\n        const path = window.location.pathname;\n        const handler = this.matchRoute(path);\n        if (handler) {\n            handler();\n        } else {\n            console.log('No specific function for this path.');\n            // Default function or behavior for unspecified paths\n        }\n    }\n    \n    \n}", "/*\n * Index  \n * Main entry point\n * \n */\n\nimport { HomePage } from \"./page/home\";\nimport { TourPage } from \"./page/tour\";\nimport { RouteDispatcher } from \"./routeDispatcher\";\n\n// Global vars\nconst SITE_NAME = 'Site';\nconst VERSION = 'v0.1.0';\n\n\n\n// Global object\nwindow[SITE_NAME] = window[SITE_NAME] || {}; \nvar Site = window[SITE_NAME];\n\n// Extend the Window interface to include fsAttributes\ndeclare global {\n    interface Window {\n      fsAttributes: [string, (filterInstances: any[]) => void][];\n\n    //   modelsDataSourceElems: NodeListOf<HTMLElement>;\n    //   modelsSelectElem: HTMLElement | null;\n    //   modelsNavElem: HTMLElement | null;\n    }\n}\n\n\n\nconst init = () => {\n    \n    console.log(`${SITE_NAME} package init ${VERSION}`);\n\n    var routeDispatcher = new RouteDispatcher();\n    routeDispatcher.routes = {\n        '/': () => {\n\n            (new HomePage()).init();\n\n        },\n        '/tour/*': () => {\n\n            (new TourPage()).init();\n\n        }\n    };\n    routeDispatcher.dispatchRoute(); \n}\n\ndocument.addEventListener(\"DOMContentLoaded\", init)\n\n\n"],
  "mappings": ";;AAQO,MAAM,WAAN,MAAe;AAAA,IAIpB,cAAc;AAAA,IACd;AAAA,IAEA,OAAO;AAEL,cAAQ,IAAI,OAAO;AAAA,IASrB;AAAA,EAOF;;;ACxBO,MAAM,WAAN,MAAe;AAAA,IAIpB,cAAc;AAAA,IACd;AAAA,IAEA,OAAO;AAEL,cAAQ,IAAI,OAAO;AAEnB,aAAO,iBAAiB,WAAW,SAAS,OAAqB;AAG/D,gBAAQ,IAAI,gBAAgB;AAC5B,gBAAQ,IAAI,MAAM,IAAI;AAOtB,cAAM,EAAE,MAAM,eAAe,IAAI,MAAM;AAGvC,YAAI,OAAO,SAAS,YAAY,OAAO,mBAAmB,UAAU;AAClE,gBAAM,cAAc,SAAS,eAAe,WAAW;AACvD,gBAAM,gBAAgB,SAAS,eAAe,QAAQ;AAEtD,cAAI,eAAe,eAAe;AAChC,wBAAY,QAAQ;AACpB,0BAAc,QAAQ;AAAA,UACxB,OAAO;AACL,oBAAQ,IAAI,2CAA2C;AAAA,UACzD;AAAA,QACF,OAAO;AACL,kBAAQ,IAAI,8CAA8C;AAAA,QAC5D;AAAA,MACF,GAAG,KAAK;AAAA,IA6BV;AAAA,EAOF;;;AC1DO,MAAM,kBAAN,MAAsB;AAAA,IAIzB,cAAc;AAAA,IAEd;AAAA,IAEA,WAAW,MAAmC;AAC1C,iBAAW,SAAS,KAAK,QAAQ;AAC7B,YAAI,MAAM,SAAS,GAAG,GAAG;AAErB,gBAAM,YAAY,MAAM,MAAM,GAAG,EAAE;AACnC,cAAI,KAAK,WAAW,SAAS,GAAG;AAC5B,mBAAO,KAAK,OAAO;AAAA,UACvB;AAAA,QACJ,WAAW,UAAU,MAAM;AAEvB,iBAAO,KAAK,OAAO;AAAA,QACvB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IAEA,gBAAgB;AACZ,YAAM,OAAO,OAAO,SAAS;AAC7B,YAAM,UAAU,KAAK,WAAW,IAAI;AACpC,UAAI,SAAS;AACT,gBAAQ;AAAA,MACZ,OAAO;AACH,gBAAQ,IAAI,qCAAqC;AAAA,MAErD;AAAA,IACJ;AAAA,EAGJ;;;AClDA,MAAM,YAAY;AAClB,MAAM,UAAU;AAKhB,SAAO,aAAa,OAAO,cAAc,CAAC;AAC1C,MAAI,OAAO,OAAO;AAelB,MAAM,OAAO,MAAM;AAEf,YAAQ,IAAI,GAAG,0BAA0B,SAAS;AAElD,QAAI,kBAAkB,IAAI,gBAAgB;AAC1C,oBAAgB,SAAS;AAAA,MACrB,KAAK,MAAM;AAEP,QAAC,IAAI,SAAS,EAAG,KAAK;AAAA,MAE1B;AAAA,MACA,WAAW,MAAM;AAEb,QAAC,IAAI,SAAS,EAAG,KAAK;AAAA,MAE1B;AAAA,IACJ;AACA,oBAAgB,cAAc;AAAA,EAClC;AAEA,WAAS,iBAAiB,oBAAoB,IAAI;",
  "names": []
}
